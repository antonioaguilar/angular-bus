/**
 * @license
 * lodash 4.11.2 lodash.com/license | Underscore.js 1.8.3 underscorejs.org/LICENSE
 */
;(function(){function n(n,t){return n.push.apply(n,t),n}function t(n,t,r){var e;return r(n,function(n,r,u){return t(n,r,u)?(e=n,false):void 0}),e}function r(n,t,r,e,u){return u(n,function(n,u,o){r=e?(e=false,n):t(r,n,u,o)}),r}function e(n,t){return O(t,function(t){return n[t]})}function u(n){return n&&n.Object===Object?n:null}function o(n){return gn[n]}function i(n){var t=false;if(null!=n&&typeof n.toString!="function")try{t=!!(n+"")}catch(r){}return t}function c(n){return n instanceof f?n:new f(n)}function f(n,t){
this.__wrapped__=n,this.__actions__=[],this.__chain__=!!t}function a(n,t,r,e){var u;return(u=n===pn)||(u=En[r],u=(n===u||n!==n&&u!==u)&&!kn.call(e,r)),u?t:n}function l(n){return nn(n)?Bn(n):{}}function p(n,t,r){if(typeof n!="function")throw new TypeError("Expected a function");return setTimeout(function(){n.apply(pn,r)},t)}function s(n,t){var r=true;return zn(n,function(n,e,u){return r=!!t(n,e,u)}),r}function h(n,t,r){for(var e=-1,u=n.length;++e<u;){var o=n[e],i=t(o);if(null!=i&&(c===pn?i===i:r(i,c)))var c=i,f=o;
}return f}function v(n,t){var r=[];return zn(n,function(n,e,u){t(n,e,u)&&r.push(n)}),r}function y(t,r,e,u,o){var i=-1,c=t.length;for(e||(e=G),o||(o=[]);++i<c;){var f=t[i];r>0&&e(f)?r>1?y(f,r-1,e,u,o):n(o,f):u||(o[o.length]=f)}return o}function g(n,t){return n&&Cn(n,t,on)}function b(n,t){return v(t,function(t){return Y(n[t])})}function _(n,t){return n>t}function d(n,t,r,e,u){return n===t?true:null==n||null==t||!nn(n)&&!tn(t)?n!==n&&t!==t:j(n,t,d,r,e,u)}function j(n,t,r,e,u,o){var c=Vn(n),f=Vn(t),a="[object Array]",l="[object Array]";
c||(a=Sn.call(n),a="[object Arguments]"==a?"[object Object]":a),f||(l=Sn.call(t),l="[object Arguments]"==l?"[object Object]":l);var p="[object Object]"==a&&!i(n),f="[object Object]"==l&&!i(t),l=a==l;o||(o=[]);var s=U(o,function(t){return t[0]===n});return s&&s[1]?s[1]==t:(o.push([n,t]),l&&!p?(r=c||isTypedArray(n)?$(n,t,r,e,u,o):q(n,t,a),o.pop(),r):2&u||(c=p&&kn.call(n,"__wrapped__"),a=f&&kn.call(t,"__wrapped__"),!c&&!a)?l?(r=z(n,t,r,e,u,o),o.pop(),r):false:(c=c?n.value():n,t=a?t.value():t,r=r(c,t,e,u,o),
o.pop(),r))}function m(n){return typeof n=="function"?n:null==n?an:(typeof n=="object"?A:k)(n)}function w(n){n=null==n?n:Object(n);var t,r=[];for(t in n)r.push(t);return r}function x(n,t){return t>n}function O(n,t){var r=-1,e=X(n)?Array(n.length):[];return zn(n,function(n,u,o){e[++r]=t(n,u,o)}),e}function A(n){var t=on(n);return function(r){var e=t.length;if(null==r)return!e;for(r=Object(r);e--;){var u=t[e];if(!(u in r&&d(n[u],r[u],pn,3)))return false}return true}}function E(n,t){return n=Object(n),H(t,function(t,r){
return r in n&&(t[r]=n[r]),t},{})}function k(n){return function(t){return null==t?pn:t[n]}}function N(n,t,r){var e=-1,u=n.length;for(0>t&&(t=-t>u?0:u+t),r=r>u?u:r,0>r&&(r+=u),u=t>r?0:r-t>>>0,t>>>=0,r=Array(u);++e<u;)r[e]=n[e+t];return r}function S(n){return N(n,0,n.length)}function T(n,t){var r;return zn(n,function(n,e,u){return r=t(n,e,u),!r}),!!r}function F(t,r){return H(r,function(t,r){return r.func.apply(r.thisArg,n([t],r.args))},t)}function R(n,t,r,e){r||(r={});for(var u=-1,o=t.length;++u<o;){
var i=t[u],c=e?e(r[i],n[i],i,r,n):n[i],f=r,a=f[i];kn.call(f,i)&&(a===c||a!==a&&c!==c)&&(c!==pn||i in f)||(f[i]=c)}return r}function B(n){return L(function(t,r){var e=-1,u=r.length,o=u>1?r[u-1]:pn,o=typeof o=="function"?(u--,o):pn;for(t=Object(t);++e<u;){var i=r[e];i&&n(t,i,e,o)}return t})}function D(n){return function(){var t=arguments,r=l(n.prototype),t=n.apply(r,t);return nn(t)?t:r}}function I(n,t,r){function e(){for(var o=-1,i=arguments.length,c=-1,f=r.length,a=Array(f+i),l=this&&this!==On&&this instanceof e?u:n;++c<f;)a[c]=r[c];
for(;i--;)a[c++]=arguments[++o];return l.apply(t,a)}if(typeof n!="function")throw new TypeError("Expected a function");var u=D(n);return e}function $(n,t,r,e,u,o){var i=-1,c=1&u,f=n.length,a=t.length;if(f!=a&&!(2&u&&a>f))return false;for(a=true;++i<f;){var l=n[i],p=t[i];if(void 0!==pn){a=false;break}if(c){if(!T(t,function(n){return l===n||r(l,n,e,u,o)})){a=false;break}}else if(l!==p&&!r(l,p,e,u,o)){a=false;break}}return a}function q(n,t,r){switch(r){case"[object Boolean]":case"[object Date]":return+n==+t;case"[object Error]":
return n.name==t.name&&n.message==t.message;case"[object Number]":return n!=+n?t!=+t:n==+t;case"[object RegExp]":case"[object String]":return n==t+""}return false}function z(n,t,r,e,u,o){var i=2&u,c=on(n),f=c.length,a=on(t).length;if(f!=a&&!i)return false;for(var l=f;l--;){var p=c[l];if(!(i?p in t:kn.call(t,p)))return false}for(a=true;++l<f;){var p=c[l],s=n[p],h=t[p];if(void 0!==pn||s!==h&&!r(s,h,e,u,o)){a=false;break}i||(i="constructor"==p)}return a&&!i&&(r=n.constructor,e=t.constructor,r!=e&&"constructor"in n&&"constructor"in t&&!(typeof r=="function"&&r instanceof r&&typeof e=="function"&&e instanceof e)&&(a=false)),
a}function C(n){var t=n?n.length:pn;if(Z(t)&&(Vn(n)||en(n)||W(n))){n=String;for(var r=-1,e=Array(t);++r<t;)e[r]=n(r);t=e}else t=null;return t}function G(n){return tn(n)&&X(n)&&(Vn(n)||W(n))}function J(n,t){return t=null==t?9007199254740991:t,!!t&&(typeof n=="number"||yn.test(n))&&n>-1&&0==n%1&&t>n}function M(n){var t=n&&n.constructor;return n===(typeof t=="function"&&t.prototype||En)}function P(n){return n&&n.length?n[0]:pn}function U(n,r){return t(n,m(r),zn)}function V(n,t){return zn(n,m(t))}function H(n,t,e){
return r(n,m(t),e,3>arguments.length,zn)}function K(n,t){var r;if(typeof t!="function")throw new TypeError("Expected a function");return n=Hn(n),function(){return 0<--n&&(r=t.apply(this,arguments)),1>=n&&(t=pn),r}}function L(n){var t;if(typeof n!="function")throw new TypeError("Expected a function");return t=qn(t===pn?n.length-1:Hn(t),0),function(){for(var r=arguments,e=-1,u=qn(r.length-t,0),o=Array(u);++e<u;)o[e]=r[t+e];for(u=Array(t+1),e=-1;++e<t;)u[e]=r[e];return u[t]=o,n.apply(this,u)}}function Q(){
if(!arguments.length)return[];var n=arguments[0];return Vn(n)?n:[n]}function W(n){return tn(n)&&X(n)&&kn.call(n,"callee")&&(!Dn.call(n,"callee")||"[object Arguments]"==Sn.call(n))}function X(n){return null!=n&&Z(Gn(n))&&!Y(n)}function Y(n){return n=nn(n)?Sn.call(n):"","[object Function]"==n||"[object GeneratorFunction]"==n}function Z(n){return typeof n=="number"&&n>-1&&0==n%1&&9007199254740991>=n}function nn(n){var t=typeof n;return!!n&&("object"==t||"function"==t)}function tn(n){return!!n&&typeof n=="object";
}function rn(n){return typeof n=="number"||tn(n)&&"[object Number]"==Sn.call(n)}function en(n){return typeof n=="string"||!Vn(n)&&tn(n)&&"[object String]"==Sn.call(n)}function un(n){return typeof n=="string"?n:null==n?"":n+""}function on(n){var t=M(n);if(!t&&!X(n))return $n(Object(n));var r,e=C(n),u=!!e,e=e||[],o=e.length;for(r in n)!kn.call(n,r)||u&&("length"==r||J(r,o))||t&&"constructor"==r||e.push(r);return e}function cn(n){for(var t=-1,r=M(n),e=w(n),u=e.length,o=C(n),i=!!o,o=o||[],c=o.length;++t<u;){
var f=e[t];i&&("length"==f||J(f,c))||"constructor"==f&&(r||!kn.call(n,f))||o.push(f)}return o}function fn(n){return n?e(n,on(n)):[]}function an(n){return n}function ln(t,r,e){var u=on(r),o=b(r,u);null!=e||nn(r)&&(o.length||!u.length)||(e=r,r=t,t=this,o=b(r,on(r)));var i=!(nn(e)&&"chain"in e&&!e.chain),c=Y(t);return zn(o,function(e){var u=r[e];t[e]=u,c&&(t.prototype[e]=function(){var r=this.__chain__;if(i||r){var e=t(this.__wrapped__);return(e.__actions__=S(this.__actions__)).push({func:u,args:arguments,
thisArg:t}),e.__chain__=r,e}return u.apply(t,n([this.value()],arguments))})}),t}var pn,sn=1/0,hn=/[&<>"'`]/g,vn=RegExp(hn.source),yn=/^(?:0|[1-9]\d*)$/,gn={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","`":"&#96;"},bn={"function":true,object:true},_n=bn[typeof exports]&&exports&&!exports.nodeType?exports:pn,dn=bn[typeof module]&&module&&!module.nodeType?module:pn,jn=dn&&dn.exports===_n?_n:pn,mn=u(bn[typeof self]&&self),wn=u(bn[typeof window]&&window),xn=u(bn[typeof this]&&this),On=u(_n&&dn&&typeof global=="object"&&global)||wn!==(xn&&xn.window)&&wn||mn||xn||Function("return this")(),An=Array.prototype,En=Object.prototype,kn=En.hasOwnProperty,Nn=0,Sn=En.toString,Tn=On._,Fn=On.Reflect,Rn=Fn?Fn.a:pn,Bn=Object.create,Dn=En.propertyIsEnumerable,In=On.isFinite,$n=Object.keys,qn=Math.max;
f.prototype=l(c.prototype),f.prototype.constructor=f;var zn=function(n,t){return function(r,e){if(null==r)return r;if(!X(r))return n(r,e);for(var u=r.length,o=t?u:-1,i=Object(r);(t?o--:++o<u)&&false!==e(i[o],o,i););return r}}(g),Cn=function(n){return function(t,r,e){var u=-1,o=Object(t);e=e(t);for(var i=e.length;i--;){var c=e[n?i:++u];if(false===r(o[c],c,o))break}return t}}();Rn&&!Dn.call({valueOf:1},"valueOf")&&(w=function(n){n=Rn(n);for(var t,r=[];!(t=n.next()).done;)r.push(t.value);return r});var Gn=k("length"),Jn=String,Mn=L(function(n,t,r){
return I(n,t,r)}),Pn=L(function(n,t){return p(n,1,t)}),Un=L(function(n,t,r){return p(n,Kn(t)||0,r)}),Vn=Array.isArray,Hn=Number,Kn=Number,Ln=B(function(n,t){R(t,on(t),n)}),Qn=B(function(n,t){R(t,cn(t),n)}),Wn=B(function(n,t,r,e){R(t,cn(t),n,e)}),Xn=L(function(n){return n.push(pn,a),Wn.apply(pn,n)}),Yn=L(function(n,t){return null==n?{}:E(n,O(y(t,1),Jn))}),Zn=m;c.assignIn=Qn,c.before=K,c.bind=Mn,c.chain=function(n){return n=c(n),n.__chain__=true,n},c.compact=function(n){return v(n,Boolean)},c.concat=function(){
var t=arguments.length,r=Q(arguments[0]);if(2>t)return t?S(r):[];for(var e=Array(t-1);t--;)e[t-1]=arguments[t];return y(e,1),n(S(r),fn)},c.create=function(n,t){var r=l(n);return t?Ln(r,t):r},c.defaults=Xn,c.defer=Pn,c.delay=Un,c.filter=function(n,t){return v(n,m(t))},c.flatten=function(n){return n&&n.length?y(n,1):[]},c.flattenDeep=function(n){return n&&n.length?y(n,sn):[]},c.iteratee=Zn,c.keys=on,c.map=function(n,t){return O(n,m(t))},c.matches=function(n){return A(Ln({},n))},c.mixin=ln,c.negate=function(n){
if(typeof n!="function")throw new TypeError("Expected a function");return function(){return!n.apply(this,arguments)}},c.once=function(n){return K(2,n)},c.pick=Yn,c.slice=function(n,t,r){var e=n?n.length:0;return r=r===pn?e:+r,e?N(n,null==t?0:+t,r):[]},c.sortBy=function(n,t){var r=0;return t=m(t),O(O(n,function(n,e,u){return{value:n,index:r++,criteria:t(n,e,u)}}).sort(function(n,t){var r;n:{r=n.criteria;var e=t.criteria;if(r!==e){var u=r!==pn,o=null===r,i=r===r,c=e!==pn,f=null===e,a=e===e;if(!f&&r>e||o&&c&&a||!u&&a||!i){
r=1;break n}if(!o&&e>r||f&&u&&i||!c&&i||!a){r=-1;break n}}r=0}return r||n.index-t.index}),k("value"))},c.tap=function(n,t){return t(n),n},c.thru=function(n,t){return t(n)},c.toArray=function(n){return X(n)?n.length?S(n):[]:fn(n)},c.values=fn,c.extend=Qn,ln(c,c),c.clone=function(n){return nn(n)?Vn(n)?S(n):R(n,on(n)):n},c.escape=function(n){return(n=un(n))&&vn.test(n)?n.replace(hn,o):n},c.every=function(n,t,r){return t=r?pn:t,s(n,m(t))},c.find=U,c.forEach=V,c.has=function(n,t){return null!=n&&kn.call(n,t);
},c.head=P,c.identity=an,c.indexOf=function(n,t,r){var e=n?n.length:0;r=typeof r=="number"?0>r?qn(e+r,0):r:0,r=(r||0)-1;for(var u=t===t;++r<e;){var o=n[r];if(u?o===t:o!==o)return r}return-1},c.isArguments=W,c.isArray=Vn,c.isBoolean=function(n){return true===n||false===n||tn(n)&&"[object Boolean]"==Sn.call(n)},c.isDate=function(n){return tn(n)&&"[object Date]"==Sn.call(n)},c.isEmpty=function(n){return X(n)&&(Vn(n)||en(n)||Y(n.splice)||W(n))?!n.length:!on(n).length},c.isEqual=function(n,t){return d(n,t)},
c.isFinite=function(n){return typeof n=="number"&&In(n)},c.isFunction=Y,c.isNaN=function(n){return rn(n)&&n!=+n},c.isNull=function(n){return null===n},c.isNumber=rn,c.isObject=nn,c.isRegExp=function(n){return nn(n)&&"[object RegExp]"==Sn.call(n)},c.isString=en,c.isUndefined=function(n){return n===pn},c.last=function(n){var t=n?n.length:0;return t?n[t-1]:pn},c.max=function(n){return n&&n.length?h(n,an,_):pn},c.min=function(n){return n&&n.length?h(n,an,x):pn},c.noConflict=function(){return On._===this&&(On._=Tn),
this},c.noop=function(){},c.reduce=H,c.result=function(n,t,r){return t=null==n?pn:n[t],t===pn&&(t=r),Y(t)?t.call(n):t},c.size=function(n){return null==n?0:(n=X(n)?n:on(n),n.length)},c.some=function(n,t,r){return t=r?pn:t,T(n,m(t))},c.uniqueId=function(n){var t=++Nn;return un(n)+t},c.each=V,c.first=P,ln(c,function(){var n={};return g(c,function(t,r){kn.call(c.prototype,r)||(n[r]=t)}),n}(),{chain:false}),c.VERSION="4.11.2",zn("pop join replace reverse split push shift sort splice unshift".split(" "),function(n){
var t=(/^(?:replace|split)$/.test(n)?String.prototype:An)[n],r=/^(?:push|sort|unshift)$/.test(n)?"tap":"thru",e=/^(?:pop|join|replace|shift)$/.test(n);c.prototype[n]=function(){var n=arguments;if(e&&!this.__chain__){var u=this.value();return t.apply(Vn(u)?u:[],n)}return this[r](function(r){return t.apply(Vn(r)?r:[],n)})}}),c.prototype.toJSON=c.prototype.valueOf=c.prototype.value=function(){return F(this.__wrapped__,this.__actions__)},(wn||mn||{})._=c,typeof define=="function"&&typeof define.amd=="object"&&define.amd? define(function(){
return c}):_n&&dn?(jn&&((dn.exports=c)._=c),_n._=c):On._=c}).call(this);/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2016 Antonio Aguilar
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

( function( root, factory ) {

  root.pubsub = factory(root._, root);

}(this, function( _, global, undefined ) {

  var _defaultConfig = {
    DEFAULT_CHANNEL: '/',
    SYSTEM_CHANNEL: 'SYS',
    enableSystemMessages: false,
    cacheKeyDelimiter: '|',
    autoCompactResolver: false
  };

  var pubsub = { configuration: _.extend({}, _defaultConfig) };
  var _config = pubsub.configuration;

  var ChannelDefinition = function( channelName, bus ) {
    this.bus = bus;
    this.channel = channelName || _config.DEFAULT_CHANNEL;
  };

  ChannelDefinition.prototype.subscribe = function() {
    return this.bus.subscribe({
      channel: this.channel,
      topic: ( arguments.length === 1 ? arguments[0].topic : arguments[0] ),
      callback: ( arguments.length === 1 ? arguments[0].callback : arguments[1] )
    });
  };

  ChannelDefinition.prototype.publish = function() {

    var envelope = {};
    var callback;

    if( typeof arguments[0] === 'string' ) {
      envelope.topic = arguments[0];
      envelope.data = arguments[1];
      callback = arguments[2];
    }
    else {
      envelope = arguments[0];
      callback = arguments[1];
    }

    if( typeof envelope !== 'object' ) {
      throw new Error('The first argument to ChannelDefinition.publish should be either an envelope object or a string topic.');
    }

    envelope.channel = this.channel;
    this.bus.publish(envelope, callback);

  };

  var SubscriptionDefinition = function( channel, topic, callback ) {

    if( arguments.length !== 3 ) {
      throw new Error('You must provide a channel, topic and callback when creating a SubscriptionDefinition instance.');
    }

    if( topic.length === 0 ) {
      throw new Error('Topics cannot be empty');
    }

    this.channel = channel;
    this.topic = topic;
    this.callback = callback;
    this.pipeline = [];
    this.cacheKeys = [];
    this._context = undefined;
  };

  var ConsecutiveDistinctPredicate = function() {
    var previous;
    return function( data ) {
      var eq = false;

      if( typeof data === 'string' ) {
        eq = data === previous;
        previous = data;
      }
      else {
        eq = _.isEqual(data, previous);
        previous = _.extend({}, data);
      }

      return !eq;
    };
  };

  var DistinctPredicate = function DistinctPredicateFactory() {
    var previous = [];
    return function DistinctPredicate( data ) {
      var isDistinct = !_.any(previous, function( p ) {
        return _.isEqual(data, p);
      });

      if( isDistinct ) {
        previous.push(data);
      }
      return isDistinct;
    };
  };

  SubscriptionDefinition.prototype = {

    'catch': function( errorHandler ) {
      var original = this.callback;
      this.callback = function() {
        try {
          original.apply(this, arguments);
        } catch( err ) {
          errorHandler(err, arguments[0]);
        }
      };
      return this;
    },

    defer: function defer() {
      return this.delay(0);
    },

    disposeAfter: function disposeAfter( maxCalls ) {

      if( typeof maxCalls !== 'number' || maxCalls <= 0 ) {
        throw new Error('The value provided to disposeAfter (maxCalls) must be a number greater than zero.');
      }

      var self = this;
      var dispose = _.after(maxCalls, _.bind(function() {
        self.unsubscribe();
      }));

      self.pipeline.push(function( data, env, next ) {
        next(data, env);
        dispose();
      });

      return self;
    },

    distinct: function distinct() {
      return this.constraint(new DistinctPredicate());
    },

    distinctUntilChanged: function distinctUntilChanged() {
      return this.constraint(new ConsecutiveDistinctPredicate());
    },

    invokeSubscriber: function invokeSubscriber( data, env ) {
      if( !this.inactive ) {
        var self = this;
        var pipeline = self.pipeline;
        var len = pipeline.length;
        var context = self._context;
        var idx = -1;
        var invoked = false;

        if( !len ) {
          self.callback.call(context, data, env);
          invoked = true;
        }
        else {
          pipeline = pipeline.concat([self.callback]);
          var step = function step( d, e ) {
            idx += 1;
            if( idx < len ) {
              pipeline[idx].call(context, d, e, step);
            } else {
              self.callback.call(context, d, e);
              invoked = true;
            }
          };
          step(data, env, 0);
        }

        return invoked;
      }
    },

    logError: function logError() {
      if( console ) {
        var report;

        if( console.warn ) {
          report = console.warn;
        }
        else {
          report = console.log;
        }

        this.catch(report);
      }
      return this;
    },

    once: function once() {
      return this.disposeAfter(1);
    },

    subscribe: function subscribe( callback ) {
      this.callback = callback;
      return this;
    },

    unsubscribe: function unsubscribe() {
      if( !this.inactive ) {
        pubsub.unsubscribe(this);
      }
    },

    constraint: function constraint( predicate ) {
      if( typeof predicate !== 'function' ) {
        throw new Error('Predicate constraint must be a function');
      }
      this.pipeline.push(function( data, env, next ) {
        if( predicate.call(this, data, env) ) {
          next(data, env);
        }
      });
      return this;
    },

    constraints: function constraints( predicates ) {
      var self = this;
      _.each(predicates, function( predicate ) {
        self.constraint(predicate);
      });
      return self;
    },

    context: function contextSetter( context ) {
      this._context = context;
      return this;
    },

    debounce: function debounce( milliseconds, immediate ) {
      if( typeof milliseconds !== 'number' ) {
        throw new Error('Milliseconds must be a number');
      }
      this.pipeline.push(
        _.debounce(function( data, env, next ) {
            next(data, env);
          },
          milliseconds,
          !!immediate
        )
      );
      return this;
    },

    delay: function delay( milliseconds ) {
      if( typeof milliseconds !== 'number' ) {
        throw new Error('Milliseconds must be a number');
      }
      var self = this;
      self.pipeline.push(function( data, env, next ) {
        setTimeout(function() {
          next(data, env);
        }, milliseconds);
      });
      return this;
    },

    throttle: function throttle( milliseconds ) {
      if( typeof milliseconds !== 'number' ) {
        throw new Error('Milliseconds must be a number');
      }
      var fn = function( data, env, next ) {
        next(data, env);
      };
      this.pipeline.push(_.throttle(fn, milliseconds));
      return this;
    }

  };

  /**
   * pubsub provides a default implementation called bindingsResolver.
   * The resolver is the mechanism by which published message topics are matched
   * to the subscribers which should receive the message.
   */
  var bindingsResolver = _config.resolver = {
    cache: {},
    regex: {},
    enableCache: true,

    compare: function compare( binding, topic, headerOptions ) {
      var pattern;
      var rgx;
      var prevSegment;
      var cacheKey = topic + _config.cacheKeyDelimiter + binding;
      var result = ( this.cache[cacheKey] );
      var opt = headerOptions || {};
      var saveToCache = this.enableCache && !opt.resolverNoCache;

      // result is cached?
      if( result === true ) {
        return result;
      }

      // plain string matching?
      if( binding.indexOf('#') === -1 && binding.indexOf('*') === -1 ) {
        result = ( topic === binding );
        if( saveToCache ) {
          this.cache[cacheKey] = result;
        }
        return result;
      }

      // ah, regex matching, then
      if( !( rgx = this.regex[binding] ) ) {
        pattern = '^' + _.map(binding.split('.'), function mapTopicBinding( segment ) {
          var res = '';
          if( !!prevSegment ) {
            res = prevSegment !== '#' ? '\\.\\b' : '\\b';
          }
          if( segment === '#' ) {
            res += '[\\s\\S]*';
          } else if( segment === '*' ) {
            res += '[^.]+';
          } else {
            res += segment;
          }
          prevSegment = segment;
          return res;
        }).join('') + '$';
        rgx = this.regex[binding] = new RegExp(pattern);
      }

      result = rgx.test(topic);

      if( saveToCache ) {
        this.cache[cacheKey] = result;
      }

      return result;
    },

    reset: function reset() {
      this.cache = {};
      this.regex = {};
    },

    purge: function( options ) {
      var self = this;
      var keyDelimiter = _config.cacheKeyDelimiter;
      var matchPredicate = function( val, key ) {
        var split = key.split(keyDelimiter);
        var topic = split[0];
        var binding = split[1];
        if( ( typeof options.topic === 'undefined' || options.topic === topic ) &&
          ( typeof options.binding === 'undefined' || options.binding === binding ) ) {
          delete self.cache[key];
        }
      };

      var compactPredicate = function( val, key ) {
        var split = key.split(keyDelimiter);
        if( pubsub.getSubscribersFor({ topic: split[0] }).length === 0 ) {
          delete self.cache[key];
        }
      };

      if( typeof options === 'undefined' ) {
        this.reset();
      } else {
        var handler = options.compact === true ? compactPredicate : matchPredicate;
        _.each(this.cache, handler);
      }
    }
  };

  var pubInProgress = 0;
  var unSubQueue = [];
  var autoCompactIndex = 0;

  function clearUnSubQueue() {
    while( unSubQueue.length ) {
      pubsub.unsubscribe(unSubQueue.shift());
    }
  }

  function getCachePurger( subDef, key, cache ) {
    return function( sub, i, list ) {
      if( sub === subDef ) {
        list.splice(i, 1);
      }
      if( list.length === 0 ) {
        delete cache[key];
      }
    };
  }

  function getCacher( topic, pubCache, cacheKey, done, envelope ) {

    var headers = envelope && envelope.headers || {};

    return function( subDef ) {

      if( _config.resolver.compare(subDef.topic, topic, headers) ) {

        subDef.cacheKeys.push(cacheKey);

        if( done ) {
          done(subDef);
        }

      }
    };
  }

  function getSystemMessage( kind, subDef ) {
    return {
      channel: _config.SYSTEM_CHANNEL,
      topic: 'subscription.' + kind,
      data: {
        event: 'subscription.' + kind,
        channel: subDef.channel,
        topic: subDef.topic
      }
    };
  }

  var sysCreatedMessage = _.bind(getSystemMessage, this, 'created');
  var sysRemovedMessage = _.bind(getSystemMessage, this, 'removed');

  function getPredicate( options, resolver ) {

    if( typeof options === 'function' ) {
      return options;
    }

    else if( !options ) {
      return function() { return true; };
    }

    else {
      return function( sub ) {

        var compared = 0;
        var matched = 0;

        // We use the bindings resolver to compare the options.topic to subDef.topic
        // Any other potential prop/value matching outside topic & context...
        _.each(options, function( val, prop ) {
          compared += 1;
          if( ( prop === 'topic' && resolver.compare(sub.topic, options.topic, { resolverNoCache: true }) ) || ( prop === 'context' && options.context === sub._context ) || ( sub[prop] === options[prop] ) ) {
            matched += 1;
          }
        });
        return compared === matched;
      };
    }
  }

  _.extend(pubsub, {
    cache: {},
    subscriptions: {},
    wireTaps: [],

    ChannelDefinition: ChannelDefinition,
    SubscriptionDefinition: SubscriptionDefinition,

    channel: function channel( channelName ) {
      return new ChannelDefinition(channelName, this);
    },

    addWireTap: function addWireTap( callback ) {
      var self = this;
      self.wireTaps.push(callback);
      return function() {
        var idx = self.wireTaps.indexOf(callback);
        if( idx !== -1 ) {
          self.wireTaps.splice(idx, 1);
        }
      };
    },

    getSubscribersFor: function getSubscribersFor( options ) {
      var result = [];
      var self = this;
      _.each(self.subscriptions, function( channel ) {
        _.each(channel, function( subList ) {
          result = result.concat(_.filter(subList, getPredicate(options, _config.resolver)));
        });
      });
      return result;
    },

    /**
     * Publish Method
     * @param envelope
     * @param cb
     */
    publish: function publish( envelope, cb ) {

      ++pubInProgress;

      // By default _.now() is just Date.now(), except in environments that do not support it.
      envelope.epoch = Date.now() || function() { return new Date().getTime(); };

      var channel = envelope.channel = envelope.channel || _config.DEFAULT_CHANNEL;
      var topic = envelope.topic;

      if( this.wireTaps.length ) {
        _.each(this.wireTaps, function( tap ) {
          tap(envelope.data, envelope, pubInProgress);
        });
      }

      var cacheKey = channel + _config.cacheKeyDelimiter + topic;
      var skipped = 0;
      var activated = 0;

      var cache = this.cache[cacheKey];

      if( !cache ) {
        // resolverNoCache is disabled internally in getCacher method
        var cacherFn = getCacher(topic, this.cache, cacheKey, function( candidate ) { if( candidate.invokeSubscriber(envelope.data, envelope) ) { activated++; } else { skipped++; }}, envelope);

        _.each(this.subscriptions[channel], function( candidates ) { _.each(candidates, cacherFn); });

      }
      else {
        _.each(cache, function( subDef ) {
          if( subDef.invokeSubscriber(envelope.data, envelope) ) {
            activated++;
          } else {
            skipped++;
          }
        });
      }

      if( --pubInProgress === 0 ) { clearUnSubQueue(); }

      if( cb ) { cb({ activated: activated, skipped: skipped }); }

    },

    /**
     * Subscribe Method
     * @param options
     * @returns {SubscriptionDefinition}
     */
    subscribe: function subscribe( options ) {

      var subscriptions = this.subscriptions;
      var subDef = new SubscriptionDefinition(options.channel || _config.DEFAULT_CHANNEL, options.topic, options.callback);
      var channel = subscriptions[subDef.channel];
      var channelLen = subDef.channel.length;
      var subs;

      if( !channel ) {
        channel = subscriptions[subDef.channel] = {};
      }

      subs = subscriptions[subDef.channel][subDef.topic];

      if( !subs ) {
        subs = subscriptions[subDef.channel][subDef.topic] = [];
      }

      // First, add the SubscriptionDefinition to the channel list
      subs.push(subDef);

      // Next, add the SubscriptionDefinition to any relevant existing cache(s)
      _.each(_.keys(this.cache), function( cacheKey ) {

        if( cacheKey.substr(0, channelLen) === subDef.channel ) {
          getCacher(cacheKey.split(_config.cacheKeyDelimiter)[1], this.cache, cacheKey)(subDef);
        }

      }, this);

      if( _config.enableSystemMessages ) {
        this.publish(sysCreatedMessage(subDef));
      }

      return subDef;
    },

    /**
     * Unsubscribe Method
     */
    unsubscribe: function unsubscribe() {
      var unSubLen = arguments.length;
      var unSubIdx = 0;
      var subDef;
      var channelSubs;
      var topicSubs;
      var idx;

      for( ; unSubIdx < unSubLen; unSubIdx++ ) {
        subDef = arguments[unSubIdx];
        subDef.inactive = true;

        if( pubInProgress ) {
          unSubQueue.push(subDef);
          return;
        }

        channelSubs = this.subscriptions[subDef.channel];
        topicSubs = channelSubs && channelSubs[subDef.topic];

        if( topicSubs ) {
          var len = topicSubs.length;
          idx = 0;

          // remove SubscriptionDefinition from channel list
          while( idx < len ) {

            if( topicSubs[idx] === subDef ) {
              topicSubs.splice(idx, 1);
              break;
            }
            idx += 1;
          }

          if( topicSubs.length === 0 ) {
            delete channelSubs[subDef.topic];
            if( !_.keys(channelSubs).length ) {
              delete this.subscriptions[subDef.channel];
            }
          }

          // Remove SubscriptionDefinition from pubsub cache
          if( subDef.cacheKeys && subDef.cacheKeys.length ) {
            var key;
            while( key = subDef.cacheKeys.pop() ) {
              _.each(this.cache[key], getCachePurger(subDef, key, this.cache));
            }
          }

          if( typeof _config.resolver.purge === 'function' ) {

            // check to see if relevant resolver cache entries can be purged
            var autoCompact = _config.autoCompactResolver === true ? 0 : typeof _config.autoCompactResolver === 'number' ? ( _config.autoCompactResolver - 1 ) : false;

            if( autoCompact >= 0 && autoCompactIndex === autoCompact ) {
              _config.resolver.purge({ compact: true });
              autoCompactIndex = 0;
            }
            else if( autoCompact >= 0 && autoCompactIndex < autoCompact ) {
              autoCompactIndex += 1;
            }
          }

        }

        if( _config.enableSystemMessages ) {
          this.publish(sysRemovedMessage(subDef));
        }
      }
    },

    reset: function reset() {
      this.unsubscribeFor();
      _config.resolver.reset();
      this.subscriptions = {};
      this.cache = {};
    },

    unsubscribeFor: function unsubscribeFor( options ) {
      var toDispose = [];

      if( this.subscriptions ) {
        toDispose = this.getSubscribersFor(options);
        this.unsubscribe.apply(this, toDispose);
      }
    }
  });

  /**
   * Implements promise feature
   */
  var ForkJoin = function( queue, onSuccess, onError, options ) {
    var self = this;
    var _onError = (Object.prototype.toString.call(onError) === '[object Function]') ? onError : function() {};
    var _options = (Object.prototype.toString.call(onError) === '[object Object]') ? onError : options || {};
    var _subscriptions = [];
    var _timeoutFn;

    var _startTimeOut = function() {
      if( _options.timeout ) {
        _timeoutFn = setTimeout(function() {
          _onError({
            type: 'timeout',
            data: _.map(_subscriptions, 'data')
          });
        }, _options.timeout);
      }
    };

    var _reset = function() {
      _.each(_subscriptions, function( sub ) {
        sub.data = undefined;
      });
    };

    var _checkFired = function() {
      var _data = _.map(_subscriptions, 'data');

      if( _.every(_data, _.identity) ) {

        clearTimeout(_timeoutFn);
        onSuccess.apply(this, _data);

        if( _options.once ) {
          self.dispose();
        }
        else {
          _reset();
          _startTimeOut();
        }
      }
    };

    self.dispose = function() {
      _.each(_subscriptions, function( sub ) {
        sub.unsubscribe();
      });
      _subscriptions = [];
    };

    _.each(queue, function( sub ) {
      var subscriptionDefinition = pubsub.subscribe(sub);
      subscriptionDefinition.data = undefined;
      subscriptionDefinition.subscribe(function( data ) {
        subscriptionDefinition.data = data;
        _checkFired();
      });
      _subscriptions.push(subscriptionDefinition);
    });

    _startTimeOut();
  };

  /**
   * Implements the pubsub.when() method
   */
  pubsub.when = function( queue, onSuccess, onError, options ) {
    return new ForkJoin(queue, onSuccess, onError, options);
  };

  return pubsub;
}) );
